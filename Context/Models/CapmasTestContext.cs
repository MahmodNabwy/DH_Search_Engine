// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Context.Models;

public partial class CapmasTestContext : DbContext
{
    public CapmasTestContext()
    {
    }

    public CapmasTestContext(DbContextOptions<CapmasTestContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Indicator> Indicators { get; set; }

    public virtual DbSet<IndicatorTranslation> IndicatorTranslations { get; set; }

    public virtual DbSet<News> News { get; set; }

    public virtual DbSet<NewsTranslation> NewsTranslations { get; set; }

    public virtual DbSet<Periodic> Periodics { get; set; }

    public virtual DbSet<PeriodicTranslation> PeriodicTranslations { get; set; }

    public virtual DbSet<Publication> Publications { get; set; }

    public virtual DbSet<PublicationDetail> PublicationDetails { get; set; }

    public virtual DbSet<PublicationIndicator> PublicationIndicators { get; set; }

    public virtual DbSet<PublicationTag> PublicationTags { get; set; }

    public virtual DbSet<PublicationTranslation> PublicationTranslations { get; set; }

    public virtual DbSet<PublicationType> PublicationTypes { get; set; }

    public virtual DbSet<PublicationTypeTranslation> PublicationTypeTranslations { get; set; }

    public virtual DbSet<Subject> Subjects { get; set; }

    public virtual DbSet<SubjectTranslation> SubjectTranslations { get; set; }

    public virtual DbSet<Tag> Tags { get; set; }

    public virtual DbSet<TagTranslation> TagTranslations { get; set; }
   

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Indicator>(entity =>
        {
            entity.Property(e => e.YearTypeId).HasDefaultValueSql("(CONVERT([bigint],(0)))");
        });

        modelBuilder.Entity<IndicatorTranslation>(entity =>
        {
            entity.HasOne(d => d.Indicator).WithMany(p => p.IndicatorTranslations).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Publication>(entity =>
        {
            entity.Property(e => e.SubsubjectId).HasDefaultValueSql("(CONVERT([bigint],(0)))");
            entity.Property(e => e.YearTypeId).HasDefaultValueSql("(CONVERT([bigint],(0)))");

            entity.HasOne(d => d.Periodic).WithMany(p => p.Publications).OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.PublicationType).WithMany(p => p.Publications).OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Subsubject).WithMany(p => p.Publications).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<PublicationDetail>(entity =>
        {
            entity.Property(e => e.ReleaseDate).HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

            entity.HasOne(d => d.Publication).WithMany(p => p.PublicationDetails).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<PublicationIndicator>(entity =>
        {
            entity.Property(e => e.FilterId).HasDefaultValueSql("(CONVERT([bigint],(0)))");

            entity.HasOne(d => d.Indicator).WithMany(p => p.PublicationIndicators).OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.PublicationDetail).WithMany(p => p.PublicationIndicators).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<PublicationTag>(entity =>
        {
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("(CONVERT([bit],(0)))");

            entity.HasOne(d => d.Publication).WithMany(p => p.PublicationTags).OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Tag).WithMany(p => p.PublicationTags).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<PublicationType>(entity =>
        {
            entity.Property(e => e.IsSystem).HasDefaultValueSql("(CONVERT([bit],(0)))");
        });

        modelBuilder.Entity<Subject>(entity =>
        {
            entity.Property(e => e.IsSystem).HasDefaultValueSql("(CONVERT([bit],(0)))");
        });

        modelBuilder.Entity<Tag>(entity =>
        {
            entity.Property(e => e.TagName).HasDefaultValueSql("(N'')");
        });

        modelBuilder.Entity<TagTranslation>(entity =>
        {
            entity.Property(e => e.TagName).HasDefaultValueSql("(N'')");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}